name: Upload Client Data

on:
  workflow_dispatch:
    inputs:
      client_id:
        description: 'Client ID'
        required: true
      client_data:
        description: 'Base64 encoded client data'
        required: true

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Create client JSON file
      env:
        CLIENT_ID: ${{ github.event.inputs.client_id }}
        CLIENT_DATA: ${{ github.event.inputs.client_data }}
      run: |
        mkdir -p clients
        echo "$CLIENT_DATA" | base64 --decode > clients/client_${CLIENT_ID}.json

        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        git add clients/client_${CLIENT_ID}.json
        git commit -m "Add client file for ${CLIENT_ID}"
        git push origin main

    - name: Update bot_proxy.json
      env:
        CLIENT_ID: ${{ github.event.inputs.client_id }}
        BOT_PROXY="bot_proxy.json"
        TOKEN=${{ secrets.T01 }}
      run: |
        if [ ! -f "$BOT_PROXY" ]; then
          echo '{
            "client_data_sha": "",
            "last_updated": "",
            "update_log": []
          }' > "$BOT_PROXY"
        fi

        NEW_SHA=$(git hash-object clients/client_${CLIENT_ID}.json || echo "placeholder_sha")

        UPDATED_CONTENT=$(jq -c \
          --arg sha "$NEW_SHA" \
          --arg date "$(date --iso-8601=seconds)" \
          --arg file "clients/client_${CLIENT_ID}.json" \
          '.client_data_sha = $sha | .last_updated = $date | .update_log += [{"date": $date, "action": "New client file added", "file": $file}]' "$BOT_PROXY")

        ENCODED_CONTENT=$(echo "$UPDATED_CONTENT" | base64 --wrap=0)

        CURRENT_SHA=$(jq -r '.client_data_sha' "$BOT_PROXY")

        RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
          -X PUT \
          -H "Authorization: token $TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "message": "Update bot_proxy.json with new SHA",
            "content": "'"$ENCODED_CONTENT"'",
            "sha": "'"$CURRENT_SHA"'",
            "branch": "main"
          }' \
          https://api.github.com/repos/Radilovk/client-data-system/contents/$BOT_PROXY)

        if [ "$RESPONSE" -ne 200 ]; then
          echo "Error: Failed to update bot_proxy.json. HTTP status $RESPONSE. Details:"
          cat response.json
          exit 1
        else
          echo "bot_proxy.json updated successfully."
        fi
